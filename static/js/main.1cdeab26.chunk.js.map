{"version":3,"sources":["utils.js","game/game.reducer.js","game/components/Cell.jsx","game/game.utils.js","game/components/GameField.jsx","game/components/Styled.js","game/index.jsx","App.jsx","index.js"],"names":["getFromTheme","themePath","props","path","split","theme","initialState","level","showHidden","showField","levelConfig","levels","GameReducer","state","action","type","merge","CellView","styled","div","size","space","ActiveCellView","width","FailedCellView","Cell","memo","id","value","isActive","forceShowHidden","isFailed","className","FieldView","animationState","Field","fieldSize","cellCount","field","hiddenCells","dispatch","updateLevel","visible","cellSize","useState","gameField","setField","gameHiddenCells","setHidden","onCellClick","target","Number","includes","updatedField","map","e","i","updatedHidden","filter","length","setTimeout","useGameField","useEffect","onClick","cellValue","key","GameView","GameFieldView","SwitchView","toggleTheme","useReducer","memoryCount","useMemo","cellsIndexes","Array","_","fill","rNum","Math","floor","random","toChange","splice","pop","push","generateGameField","console","log","shouldReset","App","defaultThemeName","themeName","setTheme","name","useTheme","GlobalStyle","createGlobalStyle","themes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cdeab26.chunk.js","sourcesContent":["import { path } from 'ramda';\n\nexport function getFromTheme (themePath = '') {\n    return function getFromThemeprops (props = {}) {\n        return path(themePath.split('.'), props.theme);\n    }\n}\n\nexport function wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { merge } from 'ramda';\n\nimport levels from '../config/levels';\n\nexport const NEW_LEVEL = 'level/new';\nexport const HIDDEN_CELL_HIDE = 'hidden/hide';\nexport const HIDDEN_CELL_SHOW = 'hidden/show';\nexport const FIELD_HIDE = 'field/hide';\nexport const FIELD_SHOW = 'field/show';\nexport const RESET_LEVEL = 'level/reset';\n\nconst START_LEVEL = 0;\n\nexport const initialState = {\n    level: START_LEVEL,\n    showHidden: true,\n    showField: false,\n    levelConfig: levels[START_LEVEL],\n}\n\nexport function GameReducer(state, action) {\n    switch(action.type) {\n        case NEW_LEVEL:\n            return merge(state, { level: action.level, levelConfig: levels[action.level] });\n        case HIDDEN_CELL_SHOW:\n            return merge(state, { showHidden: true });\n        case HIDDEN_CELL_HIDE:\n            return merge(state, { showHidden: false });\n        case FIELD_HIDE:\n            return merge(state, { showField: false });\n        case FIELD_SHOW:\n            return merge(state, { showField: true });\n        case RESET_LEVEL:\n            return merge(initialState, { levelConfig: { ...levels[START_LEVEL] } });\n        default:\n            return state;\n    }\n}","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nimport { getFromTheme } from '../../utils';\nimport { CORRECT_GUESSED_CELL, HIDDEN_CELL } from '../game.utils';\n\nconst CellView = styled.div`\n    width: ${({ size }) => size}px;\n    height: ${({ size }) => size}px;\n    background: ${getFromTheme('cell.bg')};\n    margin: ${({ space }) => space}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    text: hi;\n`;\n\nconst ActiveCellView = styled.div`\n    width: ${({ width }) => width}%;\n    height: 100%;\n    background: ${getFromTheme('cell.activeBg')};\n    transition: width .2s ease;\n    cursor: default;\n`;\n\nconst FailedCellView = styled.div`\n    width: ${({ size }) => size}%;\n    height: ${({ size }) => size}%;\n    background: ${getFromTheme('cell.failedBg')};\n    transition: width .2s ease, height .2s ease;\n`;\n\nexport const Cell = memo(function Cell(props) {\n    const { id, value, forceShowHidden } = props;\n\n    const isActive = (forceShowHidden && value === HIDDEN_CELL) || value === CORRECT_GUESSED_CELL;\n    const isFailed = !value;\n        \n    return (\n        <CellView className='no-select' {...props}>\n            <ActiveCellView id={id} width={isActive ? 100 : 0} />\n            <FailedCellView id={id} size={isFailed ? 100 : 0}/>\n        </CellView>\n    );\n});","export function generateGameField(cellCount, memoryCount) {\n    const cellsIndexes = [...Array(cellCount * cellCount)]\n        .map((_, i) => i);\n    const field = [...cellsIndexes].fill(1);\n    const hiddenCells = [];\n\n    for (let i = 0; i < memoryCount; i++) {\n        const rNum = Math.floor(Math.random() * cellsIndexes.length);\n        const toChange = cellsIndexes.splice(rNum, 1).pop();\n\n        hiddenCells.push(toChange);\n        field[toChange] = 2;\n    }\n\n    return {\n        field, hiddenCells,\n    };\n}\n\nexport const WRONG_GUESSED_CELL = 0;\nexport const CORRECT_GUESSED_CELL = 3;\nexport const CELL = 1;\nexport const HIDDEN_CELL = 2;","import React, { memo, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\n\nimport { HIDDEN_CELL_HIDE, HIDDEN_CELL_SHOW } from '../game.reducer';\nimport { Cell } from './Cell';\nimport { WRONG_GUESSED_CELL, CORRECT_GUESSED_CELL } from '../game.utils';\n\nconst FieldView = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    margin: 20px 0;\n\n    opacity: ${({ animationState }) => animationState};\n    transform: scale(${({ animationState }) => animationState});\n    transition: opacity .2s ease, transform .3s ease;\n`;\n\nexport const Field = memo(function Field ({\n    fieldSize = 0,\n    cellCount = 0,\n    space = 0,\n    field = [],\n    hiddenCells = [],\n    level = 0,\n    showHidden = false,\n    dispatch,\n    updateLevel,\n    visible,\n    levelConfig,\n}) {\n    const cellSize = fieldSize / cellCount - space;\n\n    const { gameField, onCellClick } = useGameField(field, hiddenCells, updateLevel);\n   \n    useEffect(\n        () => {\n            dispatch({ type: HIDDEN_CELL_SHOW })\n            setTimeout(() => dispatch({ type: HIDDEN_CELL_HIDE }), 1500);\n        },\n        [levelConfig]\n    );\n\n    return (\n        <FieldView\n            animationState={visible ? 1 : 0}\n            onClick={!showHidden ? onCellClick : null}>\n            {\n                gameField.map((cellValue, i) => (\n                    <Cell\n                        size={cellSize}\n                        space={space}\n                        key={i}\n                        id={i}\n                        value={cellValue}\n                        forceShowHidden={showHidden} />\n                ))\n            }\n        </FieldView>\n    );\n});\n\nfunction useGameField(field, hiddenCells, updateLevel) {\n    const [gameField, setField] = useState(field);\n    const [gameHiddenCells, setHidden] = useState(hiddenCells);\n\n    function onCellClick({ target }) {\n        const id = Number(target.id);\n\n        if (hiddenCells.includes(id)) {\n            const updatedField = gameField.map((e, i) => i === id ? CORRECT_GUESSED_CELL : e);\n            const updatedHidden = gameHiddenCells.filter(e => e !== id);\n\n            setField(updatedField);\n            setHidden(updatedHidden);\n\n            return !updatedHidden.length && setTimeout(updateLevel, 1000);\n        }\n\n        const updatedField = gameField.map((e, i) => i === id ? WRONG_GUESSED_CELL : e);\n        setField(updatedField);\n\n        return setTimeout(updateLevel, 1000, true);\n    }\n\n    return { gameField, onCellClick };\n}","import styled from 'styled-components';\n\nexport const GameView = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 80px 0;\n`;\n\nexport const GameFieldView = styled.div`\n    width: ${({ fieldSize, cellCount, space }) => fieldSize + cellCount * space}px;\n    height: ${({ fieldSize, cellCount, space }) => fieldSize + cellCount * space}px;\n    margin: 20px 0;\n`;\n\nexport const SwitchView = styled.div`\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n`;","import React, { memo, useReducer, useMemo, useEffect } from 'react';\n\n// import levels from '../config/levels';\nimport { Field } from './components/GameField';\nimport { GameFieldView, GameView, SwitchView } from './components/Styled';\nimport {\n    GameReducer, initialState, NEW_LEVEL,\n    FIELD_HIDE, FIELD_SHOW, RESET_LEVEL,\n} from './game.reducer';\nimport { generateGameField } from './game.utils';\nimport Switch from 'rc-switch';\n\nimport 'rc-switch/assets/index.css';\n\nfunction Game ({ toggleTheme }) {\n    const [{ level, showHidden, showField, levelConfig }, dispatch] = useReducer(\n        GameReducer, initialState\n    );\n\n    // const levelConfig = levels[level];\n    const { cellCount, memoryCount } = levelConfig;\n\n    const { field, hiddenCells } = useMemo(\n        () => generateGameField(cellCount, memoryCount),\n        [levelConfig]\n    );\n\n    console.log('field', field);\n    \n\n    useEffect(\n        () => setTimeout(dispatch, 500, { type: FIELD_SHOW }),\n        [levelConfig],\n    );\n\n    function updateLevel(shouldReset) {\n        dispatch({ type: FIELD_HIDE });\n        setTimeout(dispatch, 500, { type: shouldReset ? RESET_LEVEL : NEW_LEVEL, level: level + 1 });\n    }\n\n    return (\n        <GameView>\n            <GameFieldView {...levelConfig}>\n                <SwitchView>\n                    <div>Level: {level}</div>\n                    <div>\n                        Theme mode: <Switch onClick={toggleTheme} />\n                    </div>\n                </SwitchView>\n                <Field\n                    {...levelConfig}\n                    levelConfig={levelConfig}\n                    visible={showField}\n                    key={field}\n                    level={level}\n                    field={field}\n                    hiddenCells={hiddenCells}\n                    dispatch={dispatch}\n                    showHidden={showHidden}\n                    updateLevel={updateLevel}\n                />\n            </GameFieldView>\n        </GameView>\n    );\n}\n\nexport default memo(Game);","import React, { useState } from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { getFromTheme } from './utils';\nimport './index.css';\n\nimport Game from './game';\nimport themes from './config/themes.json';\n\nfunction App () {\n  const [themeName, toggleTheme] = useTheme('darkTheme');\n\n  const GlobalStyle = createGlobalStyle`\n    body {\n        background: ${getFromTheme('body.bg')};\n        color: ${getFromTheme('body.color')};\n        transition: background .3s ease;\n    }\n  `;\n  \n  return (\n    <ThemeProvider theme={themes[themeName]}>\n      <>\n        <GlobalStyle />\n        <Game toggleTheme={toggleTheme} />\n      </>\n    </ThemeProvider>\n  );\n}\n\nfunction useTheme(defaultThemeName) {\n  const [themeName, setTheme] = useState(defaultThemeName);\n\n  function switchTheme(name) {\n    setTheme(themeName === 'darkTheme' ? 'lightTheme' : 'darkTheme');\n  }\n\n  return [themeName, switchTheme];\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}