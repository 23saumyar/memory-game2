{"version":3,"sources":["utils.js","game/game.reducer.js","game/game.utils.js","game/components/Cell.jsx","game/components/GameField.jsx","game/components/Styled.js","game/index.jsx","App.jsx","index.js","game/components/start.png","game/components/pause.png","game/components/stop.jpg"],"names":["getFromTheme","themePath","props","path","split","theme","initialState","level","showHidden","showField","levelConfig","levels","GameReducer","state","action","type","merge","CellView","styled","div","size","space","ActiveCellView","width","FailedCellView","Cell","memo","id","value","isActive","forceShowHidden","isFailed","imags","start","pause","stop","num","Math","round","random","numL","includes","className","src","FieldView","animationState","Field","fieldSize","cellCount","field","hiddenCells","dispatch","updateLevel","visible","cellSize","useState","gameField","setField","gameHiddenCells","setHidden","onCellClick","target","Number","updatedField","map","e","i","updatedHidden","filter","length","setTimeout","useGameField","useEffect","onClick","cellValue","key","GameView","GameFieldView","SwitchView","toggleTheme","useReducer","memoryCount","useMemo","cellsIndexes","Array","_","fill","rNum","floor","toChange","splice","pop","push","generateGameField","console","log","shouldReset","App","defaultThemeName","themeName","setTheme","name","useTheme","GlobalStyle","createGlobalStyle","themes","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ad02b170.chunk.js","sourcesContent":["import { path } from 'ramda';\n\nexport function getFromTheme (themePath = '') {\n    return function getFromThemeprops (props = {}) {\n        return path(themePath.split('.'), props.theme);\n    }\n}\n\nexport function wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { merge } from 'ramda';\n\nimport levels from '../config/levels';\n\nexport const NEW_LEVEL = 'level/new';\nexport const HIDDEN_CELL_HIDE = 'hidden/hide';\nexport const HIDDEN_CELL_SHOW = 'hidden/show';\nexport const FIELD_HIDE = 'field/hide';\nexport const FIELD_SHOW = 'field/show';\nexport const RESET_LEVEL = 'level/reset';\n\nconst START_LEVEL = 0;\n\nexport const initialState = {\n    level: START_LEVEL,\n    showHidden: true,\n    showField: false,\n    levelConfig: levels[START_LEVEL],\n}\n\nexport function GameReducer(state, action) {\n    switch(action.type) {\n        case NEW_LEVEL:\n            return merge(state, { level: action.level, levelConfig: levels[action.level] });\n        case HIDDEN_CELL_SHOW:\n            return merge(state, { showHidden: true });\n        case HIDDEN_CELL_HIDE:\n            return merge(state, { showHidden: false });\n        case FIELD_HIDE:\n            return merge(state, { showField: false });\n        case FIELD_SHOW:\n            return merge(state, { showField: true });\n        case RESET_LEVEL:\n            return merge(initialState, { levelConfig: { ...levels[START_LEVEL] } });\n        default:\n            return state;\n    }\n}","export function generateGameField(cellCount, memoryCount) {\n    const cellsIndexes = [...Array(cellCount * cellCount)]\n        .map((_, i) => i);\n    const field = [...cellsIndexes].fill(1);\n    const hiddenCells = [];\n\n    for (let i = 0; i < memoryCount; i++) {\n        const rNum = Math.floor(Math.random() * cellsIndexes.length);\n        const toChange = cellsIndexes.splice(rNum, 1).pop();\n\n        hiddenCells.push(toChange);\n        field[toChange] = 2;\n    }\n\n    return {\n        field, hiddenCells,\n    };\n}\n\nexport const WRONG_GUESSED_CELL = 0;\nexport const CORRECT_GUESSED_CELL = 3;\nexport const CELL = 1;\nexport const HIDDEN_CELL = 2;","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nimport { getFromTheme } from '../../utils';\nimport { CORRECT_GUESSED_CELL, HIDDEN_CELL } from '../game.utils';\n\n//images below\nimport start from \"./start.png\";\nimport pause from \"./pause.png\";\nimport stop from \"./stop.jpg\";\n\n\nconst CellView = styled.div`\n    width: ${({ size }) => size}px;\n    height: ${({ size }) => size}px;\n    background: ${getFromTheme('cell.bg')};\n    margin: ${({ space }) => space}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n`;\n\nconst ActiveCellView = styled.div`\n    width: ${({ width }) => width}%;\n    height: 100%;\n    background: ${getFromTheme('cell.activeBg')};\n    transition: width .2s ease;\n    cursor: default;\n\n`;\n// loop through the images above using for loop\n    // background: ${getFromTheme('cell.activeBg')};\n\n\nconst FailedCellView = styled.div`\n    width: ${({ size }) => size}%;\n    height: ${({ size }) => size}%;\n    background: ${getFromTheme('cell.failedBg')};\n    transition: width .2s ease, height .2s ease;\n`;\n\nexport const Cell = memo(function Cell(props) {\n    const { id, value, forceShowHidden } = props;\n\n    const isActive = (forceShowHidden && value === HIDDEN_CELL) || value === CORRECT_GUESSED_CELL;\n    const isFailed = !value;\n\n\n    //for loop here for words\n    let imags = [start,pause,stop];\n    //background image that is a word???\n    let num = Math.round(Math.random()*2);\n    let numL=[];\n    while (numL.includes(num)){\n        num = Math.round(Math.random()*2);\n    } \n    numL+=num;\n        \n    return (\n        <CellView className='no-select' {...props}>\n            <ActiveCellView id={id} width={isActive ? 100 : 0}>\n                <img src={ imags[num]} width=\"100%\"/>\n            </ActiveCellView>\n            <FailedCellView id={id} size={isFailed ? 100 : 0}/>\n        </CellView>\n    );\n});","import React, { memo, useState, useEffect } from 'react';\nimport SpeechRecognition from \"react-speech-recognition\";\nimport styled from 'styled-components';\n\n\nimport { HIDDEN_CELL_HIDE, HIDDEN_CELL_SHOW } from '../game.reducer';\nimport { Cell } from './Cell';\nimport { WRONG_GUESSED_CELL, CORRECT_GUESSED_CELL } from '../game.utils';\n\nconst FieldView = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    margin: 20px 0;\n\n    opacity: ${({ animationState }) => animationState};\n    transform: scale(${({ animationState }) => animationState});\n    transition: opacity .2s ease, transform .3s ease;\n`;\n\nexport const Field = memo(function Field ({\n    fieldSize = 0,\n    cellCount = 0,\n    space = 0,\n    field = [],\n    hiddenCells = [],\n    level = 0,\n    showHidden = false,\n    dispatch,\n    updateLevel,\n    visible,\n    levelConfig,\n}) {\n    const cellSize = fieldSize / cellCount - space;\n\n    const { gameField, onCellClick } = useGameField(field, hiddenCells, updateLevel);\n   \n    useEffect(\n        () => {\n            dispatch({ type: HIDDEN_CELL_SHOW })\n            setTimeout(() => dispatch({ type: HIDDEN_CELL_HIDE }), 1500);\n        },\n        [levelConfig]\n    );\n\n    return (\n        <FieldView\n            animationState={visible ? 1 : 0}\n            onClick={!showHidden ? onCellClick : null}>\n            {\n                gameField.map((cellValue, i) => (\n                    <Cell\n                        size={cellSize}\n                        space={space}\n                        key={i}\n                        id={i}\n                        value={cellValue}\n                        forceShowHidden={showHidden} />\n                ))\n            }\n        </FieldView>\n    );\n});\n\nfunction useGameField(field, hiddenCells, updateLevel) {\n    const [gameField, setField] = useState(field);\n    const [gameHiddenCells, setHidden] = useState(hiddenCells);\n\n    function onCellClick({ target }) {\n        const id = Number(target.id);\n\n        if (hiddenCells.includes(id)) {\n            const updatedField = gameField.map((e, i) => i === id ? CORRECT_GUESSED_CELL : e);\n            const updatedHidden = gameHiddenCells.filter(e => e !== id);\n\n            setField(updatedField);\n            setHidden(updatedHidden);\n\n            return !updatedHidden.length && setTimeout(updateLevel, 1000);\n        }\n\n        const updatedField = gameField.map((e, i) => i === id ? WRONG_GUESSED_CELL : e);\n        setField(updatedField);\n\n        return setTimeout(updateLevel, 1000, true);\n    }\n\n    return { gameField, onCellClick };\n}","import styled from 'styled-components';\n\nexport const GameView = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 80px 0;\n`;\n\nexport const GameFieldView = styled.div`\n    width: ${({ fieldSize, cellCount, space }) => fieldSize + cellCount * space}px;\n    height: ${({ fieldSize, cellCount, space }) => fieldSize + cellCount * space}px;\n    margin: 20px 0;\n`;\n\nexport const SwitchView = styled.div`\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n`;","import React, { memo, useReducer, useMemo, useEffect } from 'react';\n\n// import levels from '../config/levels';\nimport { Field } from './components/GameField';\nimport { GameFieldView, GameView, SwitchView } from './components/Styled';\nimport {\n    GameReducer, initialState, NEW_LEVEL,\n    FIELD_HIDE, FIELD_SHOW, RESET_LEVEL,\n} from './game.reducer';\nimport { generateGameField } from './game.utils';\nimport Switch from 'rc-switch';\n\nimport 'rc-switch/assets/index.css';\n\nfunction Game ({ toggleTheme }) {\n    const [{ level, showHidden, showField, levelConfig }, dispatch] = useReducer(\n        GameReducer, initialState\n    );\n\n    // const levelConfig = levels[level];\n    const { cellCount, memoryCount } = levelConfig;\n\n    const { field, hiddenCells } = useMemo(\n        () => generateGameField(cellCount, memoryCount),\n        [levelConfig]\n    );\n\n    console.log('field', field);\n    \n\n    useEffect(\n        () => setTimeout(dispatch, 500, { type: FIELD_SHOW }),\n        [levelConfig],\n    );\n\n    function updateLevel(shouldReset) {\n        dispatch({ type: FIELD_HIDE });\n        setTimeout(dispatch, 500, { type: shouldReset ? RESET_LEVEL : NEW_LEVEL, level: level + 1 });\n    }\n\n    return (\n        <GameView>\n            <GameFieldView {...levelConfig}>\n                <SwitchView>\n                    <div>Level: {level}</div>\n                    <div>\n                        Theme mode: <Switch onClick={toggleTheme} />\n                    </div>\n                </SwitchView>\n                <Field\n                    {...levelConfig}\n                    levelConfig={levelConfig}\n                    visible={showField}\n                    key={field}\n                    level={level}\n                    field={field}\n                    hiddenCells={hiddenCells}\n                    dispatch={dispatch}\n                    showHidden={showHidden}\n                    updateLevel={updateLevel}\n                />\n            </GameFieldView>\n        </GameView>\n    );\n}\n\nexport default memo(Game);","import React, { useState } from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { getFromTheme } from './utils';\nimport './index.css';\n\nimport Game from './game';\nimport themes from './config/themes.json';\n\nfunction App () {\n  const [themeName, toggleTheme] = useTheme('darkTheme');\n\n  const GlobalStyle = createGlobalStyle`\n    body {\n        background: ${getFromTheme('body.bg')};\n        color: ${getFromTheme('body.color')};\n        transition: background .3s ease;\n    }\n  `;\n  \n  return (\n    <ThemeProvider theme={themes[themeName]}>\n      <>\n        <GlobalStyle />\n        <Game toggleTheme={toggleTheme} />\n      </>\n    </ThemeProvider>\n  );\n}\n\nfunction useTheme(defaultThemeName) {\n  const [themeName, setTheme] = useState(defaultThemeName);\n\n  function switchTheme(name) {\n    setTheme(themeName === 'darkTheme' ? 'lightTheme' : 'darkTheme');\n  }\n\n  return [themeName, switchTheme];\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/start.e5046bdc.png\";","module.exports = __webpack_public_path__ + \"static/media/pause.12f16f78.png\";","module.exports = __webpack_public_path__ + \"static/media/stop.a8dd6bd7.jpg\";"],"sourceRoot":""}